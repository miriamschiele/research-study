install.packages(c("BH", "blob", "brms", "broom", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "fansi", "fastmap", "fs", "future", "gargle", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jsonlite", "loo", "markdown", "Matrix", "modelr", "openssl", "parallelly", "pillar", "plotly", "posterior", "ps", "Rcpp", "RcppParallel", "rlang", "rmarkdown", "rstantools", "sourcetools", "testthat", "tibble", "tinytex", "utf8", "vctrs", "xfun", "xts"))
install.packages(c("BH", "blob", "brms", "broom", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "fansi", "fastmap", "fs", "future", "gargle", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jsonlite", "loo", "markdown", "Matrix", "modelr", "openssl", "parallelly", "pillar", "plotly", "posterior", "ps", "Rcpp", "RcppParallel", "rlang", "rmarkdown", "rstantools", "sourcetools", "testthat", "tibble", "tinytex", "utf8", "vctrs", "xfun", "xts"))
install.packages(c("BH", "blob", "brms", "broom", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "fansi", "fastmap", "fs", "future", "gargle", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jsonlite", "loo", "markdown", "Matrix", "modelr", "openssl", "parallelly", "pillar", "plotly", "posterior", "ps", "Rcpp", "RcppParallel", "rlang", "rmarkdown", "rstantools", "sourcetools", "testthat", "tibble", "tinytex", "utf8", "vctrs", "xfun", "xts"))
setwd("C:/Users/User/Desktop/RA_Franke/set up/study/replication study/results replication")
# set up
library("tidyverse")
library("brms")
library("faintr")
library("aida")
# these options help Stan run faster
options(mc.cores = parallel::detectCores())
#read in data of replication study
dat <- read_csv("results-replication-study.csv") %>%
separate(
# which column to split up
col = group,
# names of the new column to store results
into = c("metaphor", "vignetteLength"),
# separate by which character / reg-exp
sep = ", ",
# automatically (smart-)convert the type of the new cols
convert = T
)
dat <- dat %>%
select(-responseTime) %>%
pivot_wider(names_from = task, values_from = response)
# these options help Stan run faster
options(mc.cores = parallel::detectCores())
#read in data of replication study
dat <- read_csv("results-replication-study.csv") %>%
separate(
# which column to split up
col = group,
# names of the new column to store results
into = c("metaphor", "vignetteLength"),
# separate by which character / reg-exp
sep = "; ",
# automatically (smart-)convert the type of the new cols
convert = T
)
#read in data of replication study
dat <- read_csv("results-replication-study.csv") %>%
separate(
# which column to split up
col = group,
# names of the new column to store results
into = c("metaphor", "vignetteLength"),
# separate by which character / reg-exp
sep = ",",
# automatically (smart-)convert the type of the new cols
convert = T
)
dat <- dat %>%
select(-responseTime) %>%
pivot_wider(names_from = task, values_from = response)
# exclude data of pilot study
dat <- dat[61:260,]
view(dat)
# information about participants
# age
min(dat$age, na.rm=T)
# 18
max(dat$age, na.rm=T)
dat <- dat %>%
mutate(
#
response_category = c("reform", "both", "both", "reform", "both", "reform", "enforce", "enforce", "reform", "reform", "enforce", "enforce", "reform", "reform", "reform", "enforce", "enforce", "reform", "enforce", "reform", "neither", "reform", "enforce", "neither", "enforce", "reform", "enforce", "enforce", "reform", "enforce", "enforce", "both", "reform", "reform", "reform", "enforce", "both", "reform", "both", "reform", "both", "reform", "reform", "reform", "reform", "both", "both", "reform", "reform",
"reform", "reform", "reform", "both", "both", "reform", "enforce", "enforce", "reform", "neither", "neither", "reform", "reform", "both", "both", "enforce", "enforce", "reform", "enforce", "both", "reform", "enforce", "enforce", "reform", "reform", "enforce", "reform", "reform", "reform", "reform", "neither", "enforce", "both", "reform", "enforce", "enforce", "enforce", "enforce", "neither", "enforce", "reform", "enforce", "reform", "reform", "enforce", "enforce", "enforce", "reform",
"enforce", "enforce", "enforce", "reform", "reform", "enforce", "both", "reform", "enforce", "reform", "both", "neither", "reform", "reform", "reform", "both", "enforce", "enforce", "reform", "reform", "enforce", "both", "reform", "reform", "enforce", "reform", "reform", "neither", "reform", "enforce", "reform", "neither", "enforce", "reform", "enforce", "enforce", "enforce", "both", "enforce", "both", "enforce", "enforce", "neither", "neither", "neither", "enforce", "enforce", "both",
"both", "enforce", "reform", "enforce", "enforce", "both", "enforce", "enforce", "enforce", "reform", "enforce", "enforce", "both", "enforce", "neither", "enforce", "enforce", "enforce", "reform", "enforce", "enforce", "reform", "enforce", "both", "reform", "enforce", "enforce", "both", "enforce", "enforce", "enforce", "enforce", "reform", "both", "enforce", "enforce", "enforce", "enforce", "reform", "enforce", "enforce", "enforce", "enforce", "reform", "reform", "reform", "reform",
"enforce", "enforce", "enforce", "both", "reform", "enforce", "enforce", "enforce"),
response_category = factor(response_category, ordered = T, levels = c("reform", "both", "enforce", "neither"))
)
nrow(dat)
# excluding participants whose proposed solutions did not include any suggestions
dat <- dat[!dat$response_category == "neither",]
nrow(dat)
# excluding participants who chose "rather not say" for political affiliation to avoid issues associated with unequal sample sizes
dat <- dat[!dat$affiliation == "rather not say",]
nrow(dat)
# participants' comments on pilot study
dat %>% pull(comments) %>% unique()
# data plotting
dat %>%
ggplot(aes(x = vignetteLength, y = as.numeric(reliability))) +
geom_jitter(height = 0) + labs(x = "vignette Length", y = "reported reliability")
ggplot(data=dat, aes(x = affiliation, y = as.numeric(reliability), color = vignetteLength)) +
geom_jitter(height = 0)
dat %>%
ggplot(aes(x = response_category, fill = response_category, )) +
geom_bar() + theme_aida() +
labs(x = "response category", y = "number of participants", fill = "response category")
dat %>%
ggplot(aes(x = response_category, fill = response_category, )) +
facet_wrap(affiliation ~ metaphor) +
geom_bar() + theme_aida() +
labs(x = "response category", y = "number of participants", fill = "response category")
dat %>%
ggplot(aes(x = response_category, fill = response_category, )) +
facet_wrap(vignetteLength ~ metaphor) +
geom_bar() + theme_aida()
?brm
# Hypothesis 1
# main effect of metaphor,
# specifically higher rates towards "enforce" for "beast" metaphor
# tested by comparing the posterior estimates for the aggregate value in the "beast" condition with those from the "virus" condition
# as by this method:
fit <- brm(
formula = response_category ~ metaphor * vignetteLength * affiliation,
seed = 123,
data = dat,
family=cumulative("logit")
)
faintr::compare_groups(
fit,
higher = metaphor == "beast",
lower  = metaphor == "virus"
)
compare_groups(
fit,
higher = metaphor == "beast",
lower  = metaphor == "virus"
)
# Hypothesis 2
# Rates of “enforce” increase for participants that identify their political affiliation as “Republican”.
# comparison with the grand mean
faintr::compare_groups(
fit,
higher = affiliation == "Republican"
)
# Hypothesis 2
# Rates of “enforce” increase for participants that identify their political affiliation as “Republican”.
# comparison with the grand mean
compare_groups(
fit,
higher = affiliation == "Republican"
)
# Hypothesis 3
# The effect of metaphors on reasoning, as proposed in hypothesis 1, does not vary with the length of the metaphorically framed description.
dat %>%
group_by(vignetteLength) %>%
summarize(
mean = mean(as.numeric(reliability)),
SD = sd(as.numeric(reliability))
)
fit2 <- brm(
formula = as.numeric(reliability) ~ vignetteLength,
seed = 123,
data = dat
)
compare_groups(
fit2,
higher = vignetteLength == "long vignette",
lower  = vignetteLength == "short vignette"
)
compare_groups(
fit2,
higher = vignetteLength == "long vignette",
lower  = vignetteLength == "short vignette"
)
fit2 <- brm(
formula = as.numeric(reliability) ~ vignetteLength,
seed = 123,
data = dat
)
compare_groups(
fit2,
higher = vignetteLength == "long vignette",
lower  = vignetteLength == "short vignette"
)
library("aida")
compare_groups(
fit2,
higher = vignetteLength == "long vignette",
lower  = vignetteLength == "short vignette"
)
# We judge there to be evidence against the hypothesis, that is, evidence in favor of a correlation between vignette length and the effect of metaphors, if the posterior probability of this difference being bigger than zero is at least 0.95
compare_groups(
fit,
higher = vignetteLength == "long vignette",
lower  = vignetteLength == "short vignette"
)
compare_groups(
higher = fit2$vignetteLength == "long vignette",
lower  = fit2$vignetteLength == "short vignette"
)
compare_groups(
fit2,
higher = vignetteLength == "long vignette",
lower  = vignetteLength == "short vignette"
)
