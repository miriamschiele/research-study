install.packages(c("BH", "blob", "brms", "broom", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "fansi", "fastmap", "fs", "future", "gargle", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jsonlite", "loo", "markdown", "Matrix", "modelr", "openssl", "parallelly", "pillar", "plotly", "posterior", "ps", "Rcpp", "RcppParallel", "rlang", "rmarkdown", "rstantools", "sourcetools", "testthat", "tibble", "tinytex", "utf8", "vctrs", "xfun", "xts"))
install.packages(c("BH", "blob", "brms", "broom", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "fansi", "fastmap", "fs", "future", "gargle", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jsonlite", "loo", "markdown", "Matrix", "modelr", "openssl", "parallelly", "pillar", "plotly", "posterior", "ps", "Rcpp", "RcppParallel", "rlang", "rmarkdown", "rstantools", "sourcetools", "testthat", "tibble", "tinytex", "utf8", "vctrs", "xfun", "xts"))
install.packages(c("BH", "blob", "brms", "broom", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "fansi", "fastmap", "fs", "future", "gargle", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jsonlite", "loo", "markdown", "Matrix", "modelr", "openssl", "parallelly", "pillar", "plotly", "posterior", "ps", "Rcpp", "RcppParallel", "rlang", "rmarkdown", "rstantools", "sourcetools", "testthat", "tibble", "tinytex", "utf8", "vctrs", "xfun", "xts"))
setwd("C:/Users/User/Desktop/RA_Franke/set up/study/replication study/results replication")
# set up
library("tidyverse")
library("brms")
library("faintr")
library("aida")
# these options help Stan run faster
options(mc.cores = parallel::detectCores())
#read in data of replication study
dat <- read_csv("results-replication-study.csv") %>%
separate(
# which column to split up
col = group,
# names of the new column to store results
into = c("metaphor", "vignetteLength"),
# separate by which character / reg-exp
sep = ", ",
# automatically (smart-)convert the type of the new cols
convert = T
)
#read in data of replication study
dat <- read_csv("results-replication-study.csv")
?read_csv
#read in data of replication study
dat <- read_csv("results-replication-study.csv", header = TRUE, sep = "\t")
#read in data of replication study
dat <- read_csv("results-replication-study.csv", header = TRUE, sep = ";")
#read in data of replication study
dat <- read_csv("results-replication-study.csv", header = TRUE, sep = ",")
#read in data of replication study
dat <- read_csv("results-replication-study.csv",)
#read in data of replication study
dat <- read_csv("results-replication-study.csv", sep = ",")
#read in data of replication study
dat <- read_csv("results-replication-study.csv", header = TRUE)
rm(dat)
dat <- read.csv("results-replication-study.csv", sep=",", header=TRUE)
#read in data of replication study
dat <- separate(
# which column to split up
col = group,
# names of the new column to store results
into = c("metaphor", "vignetteLength"),
# separate by which character / reg-exp
sep = ", ",
# automatically (smart-)convert the type of the new cols
convert = T
)
rm(dat)
dat <- read.csv("results-replication-study.csv", sep=",", header=TRUE) %>%
separate(
col = group,
into = c("metaphor", "vignetteLength"),
sep = ",",
convert = T
)
dat <- dat %>%
select(-responseTime) %>%
pivot_wider(names_from = task, values_from = response)
# exclude data of pilot study
dat <- dat[61:260,]
view(dat)
# information about participants
# age
min(dat$age, na.rm=T)
# 18
max(dat$age, na.rm=T)
# 1850
# exclude this data point since it most likely is a typo
# use second highest value instead
tail(sort(dat$age),5)
# 75  76  79  85  1850
# calculate mean without the outlier
age.range = dat$age[!dat$age == 1850]
mean(age.range, na.rm=T)
# 38.86294
# gender
table(dat$gender)
# female   male  other
# 92       102   3
# political affiliation
table(dat$affiliation)
# Democrat        neither     rather not say     Republican
# 108             56          3                  33
# education
table(dat$education)
# Did not graduate High-school     Graduated College        Graduated High-school    Higher degree
# 2                                96                       65                       33
# data sorting by hand (see attached document "categorizing-of-responses.pdf")
# responses are categorized according to Thibodeau & Boroditsky (2011)
# 1=reform: proposed solution suggests investigating the underlying cause of the problem or suggests a particular social reform to treat or inoculate the community
# 2=enforce: proposed solution focuses on the police force or other methods of law enforcement or modifying the criminal justice system
# 3=neither: proposed solution lacked a suggestion
# 4=both: proposed solution includes same number of suggestion for both reform and enforce
# data sorting and cleaning
# solutions of the category "neither" are excluded according to Thibodeau & Boroditsky (2011)
# suggestions in line of "neighborhood watches" are excluded according to Thibodeau & Boroditsky (2015)
dat <- dat %>%
mutate(
#
response_category = c("reform", "both", "both", "reform", "both", "reform", "enforce", "enforce", "reform", "reform", "enforce", "enforce", "reform", "reform", "reform", "enforce", "enforce", "reform", "enforce", "reform", "neither", "reform", "enforce", "neither", "enforce", "reform", "enforce", "enforce", "reform", "enforce", "enforce", "both", "reform", "reform", "reform", "enforce", "both", "reform", "both", "reform", "both", "reform", "reform", "reform", "reform", "both", "both", "reform", "reform",
"reform", "reform", "reform", "both", "both", "reform", "enforce", "enforce", "reform", "neither", "neither", "reform", "reform", "both", "both", "enforce", "enforce", "reform", "enforce", "both", "reform", "enforce", "enforce", "reform", "reform", "enforce", "reform", "reform", "reform", "reform", "neither", "enforce", "both", "reform", "enforce", "enforce", "enforce", "enforce", "neither", "enforce", "reform", "enforce", "reform", "reform", "enforce", "enforce", "enforce", "reform",
"enforce", "enforce", "enforce", "reform", "reform", "enforce", "both", "reform", "enforce", "reform", "both", "neither", "reform", "reform", "reform", "both", "enforce", "enforce", "reform", "reform", "enforce", "both", "reform", "reform", "enforce", "reform", "reform", "neither", "reform", "enforce", "reform", "neither", "enforce", "reform", "enforce", "enforce", "enforce", "both", "enforce", "both", "enforce", "enforce", "neither", "neither", "neither", "enforce", "enforce", "both",
"both", "enforce", "reform", "enforce", "enforce", "both", "enforce", "enforce", "enforce", "reform", "enforce", "enforce", "both", "enforce", "neither", "enforce", "enforce", "enforce", "reform", "enforce", "enforce", "reform", "enforce", "both", "reform", "enforce", "enforce", "both", "enforce", "enforce", "enforce", "enforce", "reform", "both", "enforce", "enforce", "enforce", "enforce", "reform", "enforce", "enforce", "enforce", "enforce", "reform", "reform", "reform", "reform",
"enforce", "enforce", "enforce", "both", "reform", "enforce", "enforce", "enforce"),
response_category = factor(response_category, ordered = T, levels = c("reform", "both", "enforce", "neither"))
)
nrow(dat)
# 200
# excluding participants whose proposed solutions did not include any suggestions
dat <- dat[!dat$response_category == "neither",]
nrow(dat)
# 187
# excluding participants who chose "rather not say" for political affiliation to avoid issues associated with unequal sample sizes
dat <- dat[!dat$affiliation == "rather not say",]
nrow(dat)
# 184
# participants' comments on pilot study
dat %>% pull(comments) %>% unique()
fit2 <- brm(
formula = as.numeric(reliability) ~ vignetteLength,
seed = 123,
data = dat
)
compare_groups(
fit2,
higher = vignetteLength == "long vignette",
lower  = vignetteLength == "short vignette"
)
faintr::compare_groups(
fit2,
higher = vignetteLength == "long vignette",
lower  = vignetteLength == "short vignette"
)
view(fit2)
