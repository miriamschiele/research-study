install.packages(c("BH", "blob", "brms", "broom", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "fansi", "fastmap", "fs", "future", "gargle", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jsonlite", "loo", "markdown", "Matrix", "modelr", "openssl", "parallelly", "pillar", "plotly", "posterior", "ps", "Rcpp", "RcppParallel", "rlang", "rmarkdown", "rstantools", "sourcetools", "testthat", "tibble", "tinytex", "utf8", "vctrs", "xfun", "xts"))
install.packages(c("BH", "blob", "brms", "broom", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "fansi", "fastmap", "fs", "future", "gargle", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jsonlite", "loo", "markdown", "Matrix", "modelr", "openssl", "parallelly", "pillar", "plotly", "posterior", "ps", "Rcpp", "RcppParallel", "rlang", "rmarkdown", "rstantools", "sourcetools", "testthat", "tibble", "tinytex", "utf8", "vctrs", "xfun", "xts"))
install.packages(c("BH", "blob", "brms", "broom", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "fansi", "fastmap", "fs", "future", "gargle", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jsonlite", "loo", "markdown", "Matrix", "modelr", "openssl", "parallelly", "pillar", "plotly", "posterior", "ps", "Rcpp", "RcppParallel", "rlang", "rmarkdown", "rstantools", "sourcetools", "testthat", "tibble", "tinytex", "utf8", "vctrs", "xfun", "xts"))
install.packages("vctrs")
install.packages("vctrs")
library("tidyverse")
#read in data of pilot study
dat <- read_csv("results.csv") %>%
separate(
# which column to split up
col = group,
# names of the new column to store results
into = c("metaphor", "vignetteLength"),
# separate by which character / reg-exp
sep = ", ",
# automatically (smart-)convert the type of the new cols
convert = T
)
---
title: "Data Analysis for Replication of the Role of Methaphor in Reasoning"
---
title: "Data Analysis for Replication of the Role of Methaphor in Reasoning"
---
title: "Data Analysis for Replication of the Role of Methaphor in Reasoning"
---
# set up
library("tidyverse")
library("brms")
library("faintr")
library("aida")
# these options help Stan run faster
options(mc.cores = parallel::detectCores())
#read in data of pilot study
dat <- read_csv("results.csv") %>%
separate(
# which column to split up
col = group,
# names of the new column to store results
into = c("metaphor", "vignetteLength"),
# separate by which character / reg-exp
sep = ", ",
# automatically (smart-)convert the type of the new cols
convert = T
)
setwd("C:/Users/User/Desktop/RA_Franke/set up/study/replication study/pilot study for replication")
#read in data of pilot study
dat <- read_csv("results.csv") %>%
separate(
# which column to split up
col = group,
# names of the new column to store results
into = c("metaphor", "vignetteLength"),
# separate by which character / reg-exp
sep = ", ",
# automatically (smart-)convert the type of the new cols
convert = T
)
dat <- dat %>%
select(-responseTime) %>%
pivot_wider(names_from = task, values_from = response)
# data sorting and cleaning
# solutions of the category "neither" are excluded according to Thibodeau & Boroditsky (2011)
# suggestions in line of "neighborhood watches" are excluded according to Thibodeau & Boroditsky (2015)
dat <- dat %>%
mutate(
response_category = c("both","enforce","enforce","enforce","both","both","reform","enforce","enforce","both","reform","enforce","enforce","reform","enforce","enforce","enforce","reform","enforce","enforce","enforce","enforce","enforce","enforce","reform","enforce","enforce","enforce","enforce","enforce","reform","both","enforce","reform","reform","reform","reform","reform","reform","enforce","reform","reform","enforce","enforce","enforce","enforce","enforce","reform","reform","reform","neither","reform","enforce","reform","both","reform","both","enforce","both","reform"),
response_category = factor(response_category, ordered = T, levels = c("reform", "both", "enforce", "neither"))
) %>%
filter(response_category != "neither")
# participants' comments on pilot study
dat %>% pull(comments) %>% unique()
# data plotting
dat %>%
ggplot(aes(x = vignetteLength, y = as.numeric(reliability))) +
geom_jitter(height = 0)
# data plotting
dat %>%
ggplot(aes(x = vignetteLength, y = as.numeric(reliability))) +
geom_jitter(height = 0)
# data plotting
dat %>%
ggplot(aes(x = vignetteLength, y = as.numeric(reliability))) +
geom_jitter(height = 0)
# data plotting
dat %>%
ggplot(aes(x = vignetteLength, y = as.numeric(reliability))) +
geom_jitter(height = 0)
dat %>%
ggplot(aes(x = affiliation, y = as.numeric(reliability), color = vignetteLength)) +
geom_jitter(height = 0)
dat %>%
ggplot(x = response_category, y= group, aes(x = response_category)) +
geom_bar()
dat %>%
# filter(affiliation == "Democrat") %>%
ggplot(aes(x = response_category, fill = response_category)) +
facet_wrap(metaphor ~ vignetteLength) +
geom_bar() + theme_aida()
# data plotting
dat %>%
ggplot(aes(x = vignetteLength, y = as.numeric(reliability))) +
geom_jitter(height = 0)
dat %>%
ggplot(aes(x = affiliation, y = as.numeric(reliability), color = vignetteLength)) +
geom_jitter(height = 0)
dat %>%
ggplot(x = response_category, y= group, aes(x = response_category)) +
geom_bar()
dat %>%
ggplot(aes(x = affiliation, y = as.numeric(reliability), color = vignetteLength)) +
geom_jitter(height = 0)
dat %>%
ggplot(aes(x = affiliation, y = as.numeric(reliability), color = vignetteLength)) +
geom_jitter(height = 0) +
labs(x = "political affiliation", y = "perceived reliability", fill = "vignetteLength")
dat %>%
ggplot(aes(x = affiliation, y = as.numeric(reliability), color = vignetteLength)) +
geom_jitter(height = 0) +
labs(x = "political affiliation", y = "perceived reliability", fill = "vignetteLength") +
guides(fill=guide_legend(title="vignette length"))
dat %>%
ggplot(aes(x = affiliation, y = as.numeric(reliability), color = vignetteLength)) +
geom_jitter(height = 0) +
labs(x = "political affiliation", y = "perceived reliability", fill = "vignette length")
dat %>%
ggplot(aes(x = affiliation, y = as.numeric(reliability), color = vignetteLength)) +
geom_jitter(height = 0) +
labs(x = "political affiliation", y = "perceived reliability", fill = "vignetteLength" + color = "vignette length")
dat %>%
ggplot(aes(x = affiliation, y = as.numeric(reliability), color = vignetteLength)) +
geom_jitter(height = 0) +
labs(x = "political affiliation", y = "perceived reliability", fill = "vignetteLength", color = "vignette length")
dat %>%
ggplot(x = response_category, y= group, aes(x = response_category)) +
geom_bar()
dat %>%
ggplot(x = response_category, y= group, aes(x = response_category)) +
geom_bar() +
labs(x = "response category", y = "number of participants", fill = "response_category", color = "response category")
dat %>%
ggplot(x = response_category, y= group, aes(x = response_category, color = response_category)) +
geom_bar() +
labs(x = "response category", y = "number of participants", fill = "response_category", color = "response category")
dat %>%
ggplot(x = response_category, y= group, aes(x = response_category, fill = response_category)) +
geom_bar() +
labs(x = "response category", y = "number of participants", fill = "response_category", color = "response category")
dat %>%
ggplot(x = response_category, y= group, aes(x = response_category, fill = response_category)) +
geom_bar() +
labs(x = "response category", y = "number of participants", fill = "response category", color = "response category")
dat %>%
# filter(affiliation == "Democrat") %>%
ggplot(aes(x = response_category, fill = response_category)) +
facet_wrap(metaphor ~ vignetteLength) +
geom_bar() + theme_aida()
dat %>%
# filter(affiliation == "Democrat") %>%
ggplot(aes(x = response_category, fill = response_category)) +
facet_wrap(metaphor ~ vignetteLength) +
geom_bar() + theme_aida() +
labs(x = "response category", y = "number of participants", fill = "response category", color = "response category")
